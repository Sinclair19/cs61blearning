This program inserts random Strings of length L into different types of maps as <String, Integer> pairs.
Please enter desired length of each string: 10

Enter # strings to insert into the maps: 2000
class bstmap.ULLMap: 0.01 sec
class bstmap.BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec
Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 20000
class bstmap.ULLMap: 0.64 sec
class bstmap.BSTMap: 0.01 sec
Java's Built-in TreeMap: 0.01 sec
Java's Built-in HashMap: 0.01 sec
Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 200000
--Stack Overflow -- couldn't add 200000 strings of length 10.
class bstmap.BSTMap: 0.22 sec
Java's Built-in TreeMap: 0.21 sec
Java's Built-in HashMap: 0.08 sec
Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 400000
--Stack Overflow -- couldn't add 400000 strings of length 10.
class bstmap.BSTMap: 0.57 sec
Java's Built-in TreeMap: 0.54 sec
Java's Built-in HashMap: 0.22 sec

This program inserts lexicographically increasing Strings into Maps as <String, Integer> pairs.

Enter # strings to insert into the maps: 2000
class bstmap.ULLMap: 0.02 sec
class bstmap.BSTMap: 0.01 sec
Java's Built-in TreeMap: 0.01 sec
Java's Built-in HashMap: 0.00 sec
Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into the maps: 20000
class bstmap.ULLMap: 0.91 sec
class bstmap.BSTMap: 0.67 sec
Java's Built-in TreeMap: 0.02 sec
Java's Built-in HashMap: 0.02 sec
Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into the maps: 200000
--Stack Overflow -- couldn't add 200000 strings.
--Stack Overflow -- couldn't add 200000 strings.
Java's Built-in TreeMap: 0.22 sec
Java's Built-in HashMap: 0.07 sec
Would you like to try more timed-tests? (y/n): n